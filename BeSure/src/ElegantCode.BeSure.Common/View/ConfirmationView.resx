<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhLAEcAPcAAAAAAAICAgQEBAYGBggICAoKCgwMDA4ODhAQEBISEhQUFBYWFhkZGRwcHB4eHiIi
        IiQkJCcnJygoKCoqKi0tLTExMTQ0NDY2Njg4ODs7Oz09PUBAQEJCQkREREZGRkhISEpKSk1NTVBQUFVV
        VVlZWV1dXWBgYGJiYmRkZGZmZmhoaGpqamxsbG5ubnBwcHJycnR0dHZ2dnh4eHp6en19fZISMZIUMpMW
        NJQVMpQXNJQYM5UZNZYcNpYdOJgeOZkhOpkhPJolPZ4tPpolQJ0qQZ4rRJ4tQ58uRZ8xR6AvRaAyRqI0
        RaEySqI1SqI2TKQ6Tqc+T6U9UaZAUqhCVKlFV6pHWqlGXapIWaxLW6xKXK1NWq1MXa5PYK9SYrBTY7FW
        ZbNaZ7JZaLRca7VebLVgbbhlcrhndLlpc7pqdbtueLxter50fr51gMB5gsF6hMN9hoCAgIKCgoSEhIaG
        hoiIiIqKioyMjI6OjpCQkJKSkpWVlZaWlpmZmZycnJ6enqCgoKSkpKenp6ioqKqqqq2trbCwsLKysrW1
        tbi4uLq6ur29vb6+vsSBiMaDjMaEjMaFj8aGjceIkMmKkcmLlMqNk8qOlsqQlsuQmMySmc6Wms6WndCb
        oNCco9KgotKhp9Sjp9SlqdWnrdaorNirrteustmvstuws9qytdyytty0t925u966vN68veC9v9+/weC+
        wcDAwMLCwsTExMbGxsjIyMrKys3NzdLS0tTU1NbW1tjY2Nra2tzc3N7e3uHCxOHEw+PFxOLExuPGx+PG
        yOTHyeXJyuXKzOfMy+fOzejOz+jO0OjR0OvW0+vW1urW2ezX2evZ2ezZ2e3c2u7d3O/f4ODg4OLi4uTk
        5Obm5u/h4ejo6Orq6uzs7O7u7vDi4fHl5fLo5vPp6fPq7PPs7fTq6fTs6vXu7fbw7vDw8PLy8vbx8fbz
        9PT09Pb29vjy8vn08/j29fr3+Pr49/j4+Pn5+vr6+fr6+vr6/Pv8+/v8/Pz7+vz7/Pz8+/z8/AAAAAAA
        ACH5BAEAAP8ALAAAAAAsARwAAAj/APsJHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOK
        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
        l375l4AZmII5mIRZmIZ5mIiZmIAZEAA7
</value>
  </data>
</root>