<?xml version="1.0" encoding="utf-8"?>
<!--EXTERNAL_PROPERTIES: usdDatabaseVersion, CCNetLabel-->
<project name="TarantinoSample" xmlns="http://nant.sf.net/schemas/nant.xsd">
  	<!-- ************** -->
	<!-- Initialization -->
	<!-- ************** -->

	<include buildfile="common.build"/>

  	<loadtasks assembly="lib\nant\Tarantino.Nant.Tasks.dll" />


	<!-- ***************** -->
	<!-- Master Properties -->
	<!-- ***************** -->
	<property name="company.name" value="Tarantino Test"/>
	<property name="assembly.unittests" value="TarantinoSample.dll"/>

	<!-- Version settings -->
	<property name="project.config" value="debug"/>

	<!-- Folder references -->
	<property name="dir.solution" value="src"/>
	<property name="dir.build" value="build" dynamic="true"/>
	
	<!-- Compilation settings -->
	<property name="nant.settings.currentframework" value="net-3.5" />
	<property name="file.solution" value="${dir.solution}/${project::get-name()}.sln"/>

	<!-- Database migration settings -->
	<property name="database.script.directory" value="dbChangeScripts" />
  	<property name="database.server" value="localhost" overwrite="false"/>
	<property name="database.name" value="OrderData" overwrite="false"/>
	<property name="database.integrated" value="true" overwrite="false" />
	<property name="database.username" value="dbuser" overwrite="false"/>
	<property name="database.password" value="P@ssword1" overwrite="false"/>
	
	<!-- ********************************** -->
	<!-- Database Change Management Targets -->
	<!-- ********************************** -->
	<target name="reset-database" depends="dropDatabase, createDatabase">
		<nunit2 failonerror="true" verbose="true">
			<formatter type="Plain" />
			<test assemblyname="${dir.solution}/bin/${project.config}/${assembly.unittests}">
				<categories>
					<include name="DBSetup"/>
					<exclude name="*"/>
				</categories>
			</test>
		</nunit2>
	</target>

  	<target name="db-migration">    
    	<delete file="${database.script.directory}/Update/_New_Script.sql"  />
    	<call target="reset-database" />
    	<call target="create-versioned-database" />
    	<property name="migrationScriptName" value="${migration::next-migration-number(database.script.directory+'/Update')}_AutoGeneratedMigration.sql"/>

    	<if test="${file::exists('c:\program files (x86)\red gate\SQL Compare 8\SQLCompare.exe')}" >
    	  	<property name="redgate.exe" value="c:\program files (x86)\red gate\SQL Compare 8\SQLCompare.exe"/>
    	</if>

    	<if test="${file::exists('c:\program files\red gate\SQL Compare 8\SQLCompare.exe')}" >
      		<property name="redgate.exe" value="c:\program files\red gate\SQL Compare 8\SQLCompare.exe"/>
    	</if>

    	<exec
      		program="${redgate.exe}"
      		commandline="/f /v /server1:${database.server} /server2:${database.server} /database1:${database.name} /database2:${database.name}Versioned /scriptfile:${database.script.directory}/Update/_New_Script.sql /exclude:Table:usd_AppliedDatabaseScript"
      		resultproperty="execReturnCode"
      		failonerror ="false"/>
      	<fail if="${execReturnCode != '0' and execReturnCode != '63'}" message="Redgate Compare Failed!"/>

	    <if test="${file::exists(database.script.directory + '/Update/_New_Script.sql') == false}">
	    	<echo message=""/>
	      	<echo message="---------------------"/>
	      	<echo message="No Migration Required"/>
	    </if>

    	<if test="${file::exists(database.script.directory + '/Update/_New_Script.sql')}">
        	<move file="${database.script.directory}/Update/_New_Script.sql" tofile="${database.script.directory}/Update/${migrationScriptName}"/>
        	<echo message="Created Migration File ${database.script.directory}/Update/${migrationScriptName}"/>
      	</if>

  	</target>
	
  	<target name="create-versioned-database">
    	<tstamp></tstamp>
    	<manageSqlDatabase
			action="Drop"
			server="${database.server}"
			integratedAuthentication="true"
			database="${database.name}Versioned"
			username=""
			password="" />

	    <manageSqlDatabase
			scriptDirectory="${database.script.directory}"
			action="Create"
			server="${database.server}"
			integratedAuthentication="true"
			database="${database.name}Versioned"
			username=""
			password="" />

  	</target>

  	
</project>